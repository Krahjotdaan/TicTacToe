/*
 * This source file was generated by the Gradle 'init' task
 */
package javaproject_w2;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import java.util.Scanner;


public class GameTest {

    @Test
    public void testInitGame_allCellsEmpty() {
        Game.Cell[][] field = Game.initGame();
        assertNotNull(field);
        assertEquals(3, field.length);
        for (int i = 0; i < 3; i++) {
            assertEquals(3, field[i].length);
            for (int j = 0; j < 3; j++) {
                assertEquals(Game.Cell.EMPTY, field[i][j]);
            }
        }
    }

    @Test
    public void testFormatGame_emptyBoard() {
        Game.Cell[][] field = Game.initGame();
        String formatted = Game.formatGame(field);
        String expected = "   1 2 3\n" +
                          "  ------\n" +
                          "a| _ _ _\n" +
                          "b| _ _ _\n" +
                          "c| _ _ _\n";
        assertEquals(expected, formatted);
    }

    @Test
    public void testFormatGame_partiallyFilledBoard() {
        Game.Cell[][] field = Game.initGame();
        field[0][0] = Game.Cell.X;
        field[1][1] = Game.Cell.O;
        String formatted = Game.formatGame(field);
        String expected = "   1 2 3\n" +
                          "  ------\n" +
                          "a| X _ _\n" +
                          "b| _ O _\n" +
                          "c| _ _ _\n";
        assertEquals(expected, formatted);
    }

    @Test
    public void testFormatGame_fullyFilledBoard() {
        Game.Cell[][] field = new Game.Cell[][]{
                {Game.Cell.X, Game.Cell.O, Game.Cell.X},
                {Game.Cell.O, Game.Cell.X, Game.Cell.O},
                {Game.Cell.O, Game.Cell.X, Game.Cell.X}
        };
        String formatted = Game.formatGame(field);
        String expected = "   1 2 3\n" +
                          "  ------\n" +
                          "a| X O X\n" +
                          "b| O X O\n" +
                          "c| O X X\n";
        assertEquals(expected, formatted);
    }

    @Test
    public void testIsMoveAvailable_boardNotEmpty() {
        Game.Cell[][] field = Game.initGame();
        field[0][0] = Game.Cell.X;
        assertTrue(Game.isMoveAvailable(field));
    }

    @Test
    public void testIsMoveAvailable_boardFull() {
        Game.Cell[][] field = new Game.Cell[][]{
                {Game.Cell.X, Game.Cell.O, Game.Cell.X},
                {Game.Cell.O, Game.Cell.X, Game.Cell.O},
                {Game.Cell.O, Game.Cell.X, Game.Cell.X}
        };
        assertFalse(Game.isMoveAvailable(field));
    }

    @Test
    public void testIsMoveAvailable_boardEmpty() {
         Game.Cell[][] field = Game.initGame();
        assertTrue(Game.isMoveAvailable(field));
    }

   @Test
    public void testCheckWin_xWins() {
        Game.Cell[][] field = Game.initGame();
        field[0][0] = Game.Cell.X;
        field[0][1] = Game.Cell.X;
        field[0][2] = Game.Cell.X;
        assertEquals(Game.Cell.X, Game.checkWin(field));
    }

     @Test
    public void testCheckWin_oWins() {
        Game.Cell[][] field = Game.initGame();
        field[0][0] = Game.Cell.O;
        field[0][1] = Game.Cell.O;
        field[0][2] = Game.Cell.O;
        assertEquals(Game.Cell.O, Game.checkWin(field));
    }

   @Test
    public void testCheckWin_noWin() {
        Game.Cell[][] field = Game.initGame();
        field[0][0] = Game.Cell.X;
        field[0][1] = Game.Cell.O;
        assertEquals(Game.Cell.EMPTY, Game.checkWin(field));
    }
     @Test
    public void testMove_validMove() {
        Game.Cell[][] field = Game.initGame();
        Scanner scanner = new Scanner("a1");
        Game.move(field, Game.Cell.X, scanner);
        assertEquals(Game.Cell.X, field[0][0]);
    }

    @Test
    public void testMove_invalidMove_occupiedCell() {
        Game.Cell[][] field = Game.initGame();
        field[0][0] = Game.Cell.X;
        Scanner scanner = new Scanner("a1");
        assertThrows(IllegalArgumentException.class, () -> Game.move(field, Game.Cell.O, scanner));
    }

    @Test
    public void testMove_invalidMove_wrongFormat() {
        Game.Cell[][] field = Game.initGame();
        Scanner scanner = new Scanner("aa");
        assertThrows(IllegalArgumentException.class, () -> Game.move(field, Game.Cell.X, scanner));
    }
}
